#!/usr/bin/env python
import sys
import argparse
import requests
from subprocess import Popen, PIPE

class Http:
    def _check_if_unauthenticated(self, url):
        try:
            http = requests.get(url, timeout=3)
            if http.status_code >= 200 and http.status_code < 300:
                return True
        except:pass

    def _find_possible_paths(self, httpd):
        results = {}
        p = Popen(['strings', httpd], stdout=PIPE, stderr=PIPE)
        for line in p.communicate()[0].split('\n'):
            line = line.rstrip('\r\n')
            if line.startswith('index') or line.endswith('.htm')\
                or line.endswith('.html') or line.endswith('.asp')\
                or line.endswith('.js') or line.endswith('.ha')\
                or line.endswith('.css') or line.endswith('.cgi')\
                or line.endswith('.html'):
                    yield line

    def run(self, ip, port, httpd):
        if int(port) == 443:prefix = "https://"
        else:prefix = "http://"
        for path in self._find_possible_paths(httpd):
            url = "%s%s:%s/%s" % (prefix, ip, port, path.lstrip('/'))
            if self._check_if_unauthenticated(url):
                sys.stdout.write("\033[92m[+]\033[1;m %s\n" % url)
                yield url
            else:
                sys.stdout.write("\033[91m[-]\033[1;m %s\n" % url)

if __name__ == '__main__':
    parse = argparse.ArgumentParser(description="looks for urls in a given binary and tests them for authentication")
    parse.add_argument('ip', help='target ip address')
    parse.add_argument('port', help='target port number')
    parse.add_argument('httpd', help='path to httpd binary')
    parse.add_argument('output', help='output file')
    args = parse.parse_args()
    f = open(args.output, 'w+')
    http = Http()
    for url in http.run(args.ip, args.port, args.httpd):
        f.write('%s\n' % url)
    f.close()
